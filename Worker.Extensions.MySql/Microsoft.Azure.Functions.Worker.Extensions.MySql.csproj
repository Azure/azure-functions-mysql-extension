<Project Sdk="Microsoft.NET.Sdk">
	
	<PropertyGroup>
		<TargetFramework>net6</TargetFramework>
		<AssemblyName>Microsoft.Azure.Functions.Worker.Extensions.MySql</AssemblyName>
		<RootNamespace>Microsoft.Azure.Functions.Worker.Extensions.MySql</RootNamespace>
		<Description>MySql extension for .NET isolated Azure Functions</Description>
		<Product>MySql Binding Worker</Product>
		<!-- Default Version for dev -->
		<Version>99.99.99</Version>
		<OOPWorkerSupportedExtensionVersion>99.99.99</OOPWorkerSupportedExtensionVersion>
		<PackageId>Microsoft.Azure.Functions.Worker.Extensions.MySql</PackageId>
		<PackageTags>Microsoft Azure WebJobs AzureFunctions Isolated DotnetIsolated MySql AzureMySql Worker</PackageTags>
		<GenerateAssemblyInfo>true</GenerateAssemblyInfo>
		<IsPackable>true</IsPackable>
		<GeneratePackageOnBuild>true</GeneratePackageOnBuild>
	</PropertyGroup>

	<ItemGroup>
		<PackageReference Include="Microsoft.Azure.Functions.Worker.Extensions.Abstractions" />
		<None Include="..\Images\pkgicon.png" Pack="true" PackagePath="" />
		<None Include="..\README.md" Pack="true" PackagePath="" />
	</ItemGroup>

	<ItemGroup>
		<!-- We want to build the extension project first since the Out of Proc sample project references the package produced
			 by building that. But we don't want it as an actual runtime depdendency -->
		<ProjectReference Include="..\src\Microsoft.Azure.WebJobs.Extensions.MySql.csproj">
			<ReferenceOutputAssembly>false</ReferenceOutputAssembly>
		</ProjectReference>
	</ItemGroup>

	<ItemGroup>
		<AssemblyAttribute Include="Microsoft.Azure.Functions.Worker.Extensions.Abstractions.ExtensionInformationAttribute">
			<_Parameter1>Microsoft.Azure.WebJobs.Extensions.MySql</_Parameter1>
			<_Parameter2>$(OOPWorkerSupportedExtensionVersion)</_Parameter2>
		</AssemblyAttribute>
	</ItemGroup>

	<!-- To fix a build issue. When we create above assembly for WorkerExtensions, the assemebly created in User Temp Location, and from there it's unable to locate "Microsoft.Azure.WebJobs.Extensions.MySql" nuget package
	So, to fix this we need to add nuget source in User Nuget Config File-->
	<Target Name="AddNugetSourceInUserNugetConfig" BeforeTargets="Build">
		<Exec Command="dotnet nuget add source &quot;$(SolutionDir)local-packages&quot; --name nuget.local" IgnoreExitCode="true" />
	</Target>

</Project>